package {{.LowerModelName}}

import (
	"github.com/gin-gonic/gin"
	"{{.Package}}/common/bizError"
	"{{.Package}}/common/types"
	"{{.Package}}/model"
	"{{.Package}}/router/base"
	{{.LowerModelName}}Service "{{.Package}}/service/{{.LowerModelName}}"
)

func Get(c *gin.Context) {
	idStr := c.Param("id")
	if idStr == "" {
		base.Fail(c, bizError.CommonInvalidError.Error())
		return
	}

    id := types.StringToInt(idStr)

    response, err := {{.LowerModelName}}Service.GetById(c, int32(id))
    if err != nil {
        base.Fail(c, bizError.CommonQueryError.Error()+err.Error())
        return
    }

	base.Success(c, response)
}


func GetList(c *gin.Context) {
	req := &base.PageRequest{}
    if err := c.Bind(req); err != nil {
        base.Fail(c, bizError.CommonInvalidError.Error()+err.Error())
        return
    }

    response, count, err := {{.LowerModelName}}Service.GetList(c, req.Page, req.Size)
    if err != nil {
        base.Fail(c, bizError.CommonQueryError.Error()+err.Error())
        return
    }

	base.Success(c, base.PageResponse{count, response})
}


func Add(c *gin.Context) {
	req := &model.{{.ModelName}}{}
    if err := c.Bind(req); err != nil {
        base.Fail(c, bizError.CommonInvalidError.Error()+err.Error())
        return
    }

    response, err := {{.LowerModelName}}Service.Create(c, req)
    if err != nil {
        base.Fail(c, bizError.CommonUpdateError.Error()+err.Error())
        return
    }

	base.Success(c, response)
}


func Update(c *gin.Context) {
	req := &model.{{.ModelName}}{}
    if err := c.Bind(req); err != nil {
        base.Fail(c, bizError.CommonInvalidError.Error()+err.Error())
        return
    }

    err := {{.LowerModelName}}Service.Update(c, req)
    if err != nil {
        base.Fail(c, bizError.CommonUpdateError.Error()+err.Error())
        return
    }

	base.Success(c, nil)
}

